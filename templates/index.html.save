<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Virtual Pet - Moolandia</title>
<style>
/* üè† Barn Background (Includes Window Panes) */
.background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-image: url("{{ url_for('static', filename='background.png') }}");
    background-size: cover;
    background-position: center;
    z-index: 1; /* ‚úÖ Ensures the barn is on top of the seasonal background */
}

/* üåø Seasonal Window Background */
.window-background {
    position: absolute;
    top: 22%; /* ‚úÖ Adjust to align perfectly with the window */
    left: 43%; /* ‚úÖ Fine-tune for center alignment */
    width: 15%; /* ‚úÖ Ensure it fills the window */
    height: 27%; /* ‚úÖ Adjust to match the window size */
    background-image: url("{{ url_for('static', filename=background) }}");
    background-size: cover;
    background-position: center;
    z-index: 0; /* ‚úÖ Keeps it behind the barn but visible through the window */
    border-radius: 4px; /* Optional: smooth edges */
}

/* üåßÔ∏è Weather Animation Canvas (For Rain, Snow, etc.) */
#weatherCanvas {
    position: absolute;
    top: 22%;
    left: 43%;
    width: 15%;
    height: 27%;
    z-index: 2; /* ‚úÖ Places it above the seasonal background */
    pointer-events: none;
}

/* üè° General Page Layout (No Background Image Here) */
body {
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-family: Arial, sans-serif;
}
</style>
</head>

<body>
    <!-- üåø Seasonal Window Background (Behind the Barn) -->
    <div class="window-background"></div>

    <!-- üåßÔ∏è Weather Effects -->
    <canvas id="weatherCanvas"></canvas>

    <!-- üè† Barn Background (With Window Panes) -->
    <div class="background"></div>

    <!-- Add the rest of your HTML content here (Moolapup, Stats, Buttons, etc.) -->

</body>
</html>

        /* üêÆ Moolapup Positioning */
        .pet-container {
            position: absolute;
            bottom: 64%; /* Moves Moolapup up */
            left: 40%; /* Moves Moolapup slightly left */
            transform: translateX(-50%);
            z-index: 5;
            animation: breathe 3s infinite ease-in-out;
        }

        .pet {
            width: 350px;
            position: absolute;
        }

        .blink-hidden {
            opacity: 0;
            position: absolute;
            left: 0;
            top: 0;
        }
            
        /* üìä Stats & Buttons Layout */
        .game-container {   
            display: flex;
            justify-content: space-between;
            width: 80%;
            max-width: 600px;
            margin-top: 20px;
        }
         
        .stats-container {
            position: absolute;
            top: 75%;
            left: 15px;
            width: 260px;
            text-align: center;
            transform: translateY(-50%);
        }
    
        .stats-sign {
            width: 100%;
        }
         
        .stats-text {
            position: absolute;
            top: 50%;
            left: 50%; 
            transform: translate(-50%, -50%);
            font-size: 16px;
            color: black;
            font-weight: bold;
        }

        /* üéÆ Buttons */
        .buttons-container {
            position: absolute;
            bottom: 2.5%;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
        }

        button {
            padding: 12px 18px;
            font-size: 18px;
            background-color: #ffcc00;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }
            
        button:hover {
            background-color: #ffaa00;
        }

        /* üî• Lantern & Glow Styling */
        .lantern-container {  
            position: absolute;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Lantern Image */
        .lantern-img {
            width: 140px;
            height: auto;
            position: relative;
            z-index: 2;
        }

        /* Lantern Glow */
        .lantern-glow {
            position: absolute;
            width: 180px;
            height: 180px;
            background: radial-gradient(circle, rgba(255, 204, 0, 0.7) 20%,
                                           rgba(255, 204, 0, 0.3) 50%,
                                           rgba(255, 204, 0, 0.1) 75%,
                                           rgba(255, 204, 0, 0) 100%);
            border-radius: 50%;
            opacity: 0.9;
            animation: flicker 1.8s infinite ease-in-out alternate;
            pointer-events: none;
            filter: blur(12px);
            z-index: 1;
        }

        /* üîπ Wall Lantern (Top-Left) */
        .wall-lantern-container {
            position: absolute;
            top: 250px;
            left: 85px;
            width: 150px;
            height: auto;
            z-index: 2;
        }

        /* üîπ Floor Lantern (Bottom-Right) */
        .floor-lantern-container {
            position: absolute;
            bottom: 55px;
            right: 65px;
            width: 170px;
            height: auto;
            z-index: 2;
        }

        /* üå¨Ô∏è Breathing Animation */
        @keyframes breathe {
            0% { transform: translateX(-50%) translateY(0); }
            50% { transform: translateX(-50%) translateY(-10px); }
            100% { transform: translateX(-50%) translateY(0); }
        }   

        /* ‚ú® Flickering Effect */
        @keyframes flicker {
            0% { opacity: 0.5; transform: scale(1); filter: blur(6px); }
            50% { opacity: 0.9; transform: scale(1.1); filter: blur(10px); }
            100% { opacity: 0.7; transform: scale(1); filter: blur(8px); }
        }
    </style>
</head>
            
<body>
<!-- üåø Seasonal Window Background -->
<div class="window-background"></div>

    <!-- Weather Animation Canvas -->
    <canvas id="weatherCanvas"></canvas>

    <!-- üî• Left Wall Lantern -->
    <div class="wall-lantern-container">
        <div class="lantern-glow"></div>
        <img src="{{ url_for('static', filename='walllantern.png') }}" alt="Wall Lantern" class="lantern-img">
    </div>
            
    <!-- üî• Floor Lantern -->
    <div class="floor-lantern-container">
        <div class="lantern-glow"></div>
        <img src="{{ url_for('static', filename='lantern.png') }}" alt="Floor Lantern" class="lantern-img">
    </div>

    <!-- üîπ Title Image -->
    <img src="{{ url_for('static', filename='title.png') }}" alt="Virtual Pet Title" class="title-image">

<!-- üêÆ Pet Container -->
<div class="pet-container">
    {% if pet_image %}
        <!-- Normal Moolapup Image -->
        <img id="moolapup-normal" src="{{ url_for('static', filename=pet_image) }}" alt="Moolapup Image" class="pet">
        
        <!-- Blinking Moolapup Image -->
        <img id="moolapup-blink" src="{{ url_for('static', filename=pet_image.replace('.png', '-blink.png')) }}" alt="Moolapup Blinking" class="pet blink-hidden">
    {% else %}
        <p style="color: red;">Error: Pet image not found!</p> <!-- Debugging -->
    {% endif %}
</div>

    <!-- üìä Game Interface (Stats & Buttons) -->
    <div class="game-container">
        <!-- üìú Stats Sign with Pet Stats -->
        <div class="stats-container">
            <img src="{{ url_for('static', filename='stats-sign.png') }}" alt="Stats Sign" class="stats-sign">
            <div class="stats-text" id="stats">
                <p>Hunger: <span id="hunger">{{ pet[4] }}</span>/10</p>
                <p>Energy: <span id="energy">{{ pet[5] }}</span>/10</p>
                <p>Happiness: <span id="happiness">{{ pet[6] }}</span>/10</p>
                <p>Health: <span id="health">{{ pet[7] }}</span>/10</p>
            </div>
        </div>

        <!-- üéÆ Buttons for Interactions -->
        <div class="buttons-container">
            <form action="/interact" method="post">
                <button type="submit" name="action" value="feed">Feed</button>
                <button type="submit" name="action" value="play">Play</button>
                <button type="submit" name="action" value="rest">Let it Rest</button>
                <button type="submit" name="action" value="medical">Medical Care</button>
            </form>
        </div>
    </div>

    <script>
function blinkMoolapup() {
    document.getElementById("moolapup-normal").classList.add("blink-hidden");
    document.getElementById("moolapup-blink").classList.remove("blink-hidden");

    // Keep Moolapup's eyes closed for 500ms (0.5 seconds)
    setTimeout(() => {
        document.getElementById("moolapup-normal").classList.remove("blink-hidden");
        document.getElementById("moolapup-blink").classList.add("blink-hidden");
    }, 500); // Adjust this number to make the blink last longer
}

// Moolapup blinks every 4 seconds
setInterval(blinkMoolapup, 4000);

function updateStats() {
    fetch("/get_stats")  // Ensure this matches your Flask route
        .then(response => response.json())
        .then(data => {
            document.getElementById("hunger").textContent = data.hunger;
            document.getElementById("energy").textContent = data.energy;
            document.getElementById("happiness").textContent = data.happiness;
            document.getElementById("health").textContent = data.health;
        })
        .catch(error => console.error("Error fetching stats:", error));
}

// Call updateStats every 2 seconds
setInterval(updateStats, 2000);

<script>
    // üå¶Ô∏è JavaScript Weather Animation
    const canvas = document.getElementById("weatherCanvas");
    const ctx = canvas.getContext("2d");

    canvas.width = window.innerWidth * 0.4;  
    canvas.height = window.innerHeight * 0.4;  

    let weatherEffect = "{{ weather_effect }}";  // Get effect from Flask

    function createParticles(effect) {
        let particles = [];
        for (let i = 0; i < 50; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: Math.random() * 3 + 1,
                speed: Math.random() * 2 + 1,
                effect: effect
            });
        }
        return particles;
    }

    let particles = createParticles(weatherEffect);

    function drawParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach(p => {
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);

            // üü¢ Set colors based on effect
            if (p.effect === "snow") {
                ctx.fillStyle = "white";
            } else if (p.effect === "rain") {
                ctx.fillStyle = "rgba(0, 100, 255, 0.6)";
            } else if (p.effect === "leaves") {
                ctx.fillStyle = "rgba(165, 42, 42, 0.8)";
            } else if (p.effect === "wind") {
                ctx.fillStyle = "rgba(200, 200, 200, 0.3)";
            }

            ctx.fill();

            // üü¢ Move particles based on effect
            if (p.effect === "snow") {
                p.y += p.speed * 0.5;
            } else if (p.effect === "rain") {
                p.y += p.speed * 2;
            } else if (p.effect === "leaves") {
                p.y += p.speed * 0.7;
                p.x += Math.sin(p.y / 50) * 2;
            } else if (p.effect === "wind") {
                p.x += p.speed * 1.5;
                if (p.x > canvas.width) p.x = 0;
            }

            // Reset particles when they go off-screen
            if (p.y > canvas.height) p.y = 0;
        });

        requestAnimationFrame(drawParticles);
    }

    drawParticles();
</script>
</body>
</html>

